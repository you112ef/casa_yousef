DATA ACCESS ERRORS FIX GUIDE
=========================

This document provides guidance on identifying and fixing common data access errors in the Sky CASA application.

COMMON DATA ACCESS ERRORS AND SOLUTIONS
------------------------------------

1. CONNECTION ERRORS
   -----------------
   
   Problem: Database connection failures
   Solution: Proper connection handling with validation
   
   ❌ INCORRECT:
   var connection = new SQLiteConnection("Data Source=database.db");
   connection.Open(); // May fail if file doesn't exist
   
   ✅ CORRECT:
   if (!File.Exists("database.db")) {
       throw new FileNotFoundException("Database file not found");
   }
   using (var connection = new SQLiteConnection("Data Source=database.db")) {
       connection.Open();
       // Use connection
   } // Automatically closed and disposed

2. SQL INJECTION VULNERABILITIES
   ----------------------------
   
   Problem: Direct string concatenation in SQL queries
   Solution: Use parameterized queries
   
   ❌ INCORRECT:
   string query = "SELECT * FROM patients WHERE name = '" + userName + "'";
   var cmd = new SQLiteCommand(query, connection);
   
   ✅ CORRECT:
   string query = "SELECT * FROM patients WHERE name = @userName";
   var cmd = new SQLiteCommand(query, connection);
   cmd.Parameters.AddWithValue("@userName", userName);

3. NULL REFERENCE EXCEPTIONS
   -------------------------
   
   Problem: Accessing data without checking for null values
   Solution: Safe data access methods
   
   ❌ INCORRECT:
   string name = reader.GetString("name"); // May throw exception if null
   
   ✅ CORRECT:
   string name = reader.IsDBNull("name") ? "" : reader.GetString("name");
   // Or use the safe methods provided in DataAccessLayer

4. RESOURCE LEAKAGE
   ----------------
   
   Problem: Not properly disposing of database resources
   Solution: Use using statements for automatic disposal
   
   ❌ INCORRECT:
   var connection = new SQLiteConnection(connectionString);
   var cmd = new SQLiteCommand(query, connection);
   var reader = cmd.ExecuteReader();
   // Resources may not be properly disposed
   
   ✅ CORRECT:
   using (var connection = new SQLiteConnection(connectionString))
   using (var cmd = new SQLiteCommand(query, connection))
   using (var reader = cmd.ExecuteReader()) {
       // Use resources
   } // All resources automatically disposed

5. TRANSACTION ERRORS
   ------------------
   
   Problem: Incomplete transactions leading to data inconsistency
   Solution: Proper transaction handling with try-catch-finally
   
   ❌ INCORRECT:
   connection.Open();
   var transaction = connection.BeginTransaction();
   // Perform operations
   transaction.Commit(); // May not be reached if exception occurs
   
   ✅ CORRECT:
   using (var connection = new SQLiteConnection(connectionString)) {
       connection.Open();
       using (var transaction = connection.BeginTransaction()) {
           try {
               // Perform operations
               transaction.Commit();
           }
           catch {
               transaction.Rollback();
               throw;
           }
       }
   }

6. DATA TYPE CONVERSION ERRORS
   ---------------------------
   
   Problem: Incorrect data type conversions
   Solution: Safe conversion methods
   
   ❌ INCORRECT:
   int age = (int)reader["age"]; // May throw InvalidCastException
   
   ✅ CORRECT:
   int age = reader.IsDBNull("age") ? 0 : reader.GetInt32("age");
   // Or use the safe methods provided in DataAccessLayer

IMPLEMENTED SOLUTIONS
-------------------

1. DataAccessLayer.cs and DataAccessLayer.vb:
   - Comprehensive data access layer with error handling
   - Safe methods for all common data operations
   - Parameterized query support
   - Resource management with using statements
   - Safe data retrieval methods

2. Key Features:
   - ExecuteQuery: For SELECT operations returning DataTable
   - ExecuteNonQuery: For INSERT/UPDATE/DELETE operations
   - ExecuteScalar: For queries returning single values
   - GetTableNames: Retrieve all table names
   - GetTableSchema: Get schema information for tables
   - GetSampleData: Retrieve sample data from tables
   - Safe data access methods for all common data types

3. Error Handling:
   - File existence validation
   - Proper exception handling and wrapping
   - Resource cleanup with using statements
   - Safe data type conversions

BEST PRACTICES IMPLEMENTED
------------------------

1. Connection Management:
   - Validate database file existence before connecting
   - Use using statements for automatic resource disposal
   - Handle connection errors gracefully

2. Query Execution:
   - Always use parameterized queries to prevent SQL injection
   - Handle query execution errors with meaningful messages
   - Return appropriate data structures (DataTable, int, object)

3. Data Access:
   - Provide safe methods for accessing data with default values
   - Handle DBNull values properly
   - Validate column existence before accessing

4. Error Reporting:
   - Wrap exceptions with meaningful messages
   - Preserve inner exceptions for debugging
   - Log errors appropriately

INTEGRATION GUIDE
---------------

To integrate these solutions into the Sky CASA application:

1. Replace direct database access code with DataAccessLayer methods
2. Use parameterized queries for all user input
3. Handle exceptions appropriately in the UI layer
4. Use the safe data access methods for reading values
5. Follow the examples provided in DataAccessExamples

EXAMPLE INTEGRATION
-----------------

// Before (problematic):
string query = "SELECT * FROM patients WHERE id = " + patientId;
var cmd = new SQLiteCommand(query, connection);
var reader = cmd.ExecuteReader();
string name = reader["name"].ToString(); // May throw exception

// After (safe):
var dal = new DataAccessLayer("database.db");
var data = dal.ExecuteQuery("SELECT * FROM patients WHERE id = @param0", patientId);
if (data.Rows.Count > 0) {
    string name = DataAccessLayer.SafeGetString(data.Rows[0], "name", "Unknown");
}

STATUS
------

✅ Common data access errors identified
✅ Comprehensive solutions implemented
✅ C# and VB.NET implementations provided
✅ Best practices documented
✅ Integration guide provided

The Sky CASA application now has a robust data access layer that prevents common data retrieval errors and provides safe, reliable database operations.