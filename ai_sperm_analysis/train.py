#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sky CASA - AI Sperm Analysis Training Script
YOLOv8 Model Training for Sperm Detection

Requirements:
pip install ultralytics opencv-python-headless numpy pandas scipy torch torchvision
"""

from ultralytics import YOLO
import os

def train_sperm_model():
    """
    ุชุฏุฑูุจ ูููุฐุฌ ุงูุฐูุงุก ุงูุงุตุทูุงุนู ููุดู ุงูุญููุงูุงุช ุงูููููุฉ
    """
    
    print("๐งฌ ุจุฏุก ุชุฏุฑูุจ ูููุฐุฌ ูุดู ุงูุญููุงูุงุช ุงูููููุฉ...")
    print("=" * 50)
    
    # ุชุญููู ุงููููุฐุฌ ุงูุฃุณุงุณู
    model = YOLO('yolov8n.pt')  # YOLOv8 Nano - ุณุฑูุน ูููุงุณุจ ููุชุทุจูู ุงูุทุจู
    
    # ูุนุงููุงุช ุงูุชุฏุฑูุจ
    training_params = {
        'data': 'dataset/data.yaml',
        'epochs': 100,              # ุนุฏุฏ ุฏูุฑุงุช ุงูุชุฏุฑูุจ
        'imgsz': 640,              # ุญุฌู ุงูุตูุฑุฉ
        'batch': 8,                # ุญุฌู ุงูุฏูุนุฉ
        'name': 'sperm-analyzer-v1', # ุงุณู ุงููููุฐุฌ
        'patience': 20,            # ุนุฏุฏ ุงูุนุตูุฑ ุจุฏูู ุชุญุณู ูุจู ุงูุชููู
        'save': True,              # ุญูุธ ุงููููุฐุฌ
        'val': True,               # ุงูุชุญูู ูู ุตุญุฉ ุงููููุฐุฌ
        'plots': True,             # ุฑุณูู ุจูุงููุฉ ูููุชุงุฆุฌ
        'device': 0,               # ุงุณุชุฎุฏุงู GPU ุฅุฐุง ูุชููุฑ
        'workers': 4,              # ุนุฏุฏ ุงูุนูุงู ูุชุญููู ุงูุจูุงูุงุช
        'project': './outputs',    # ูุฌูุฏ ุงููุชุงุฆุฌ
        'exist_ok': True,          # ุงูุณูุงุญ ุจุงููุชุงุจุฉ ููู ุงููุฌูุฏ
        'pretrained': True,        # ุงุณุชุฎุฏุงู ุงููููุฐุฌ ุงููุฏุฑุจ ูุณุจูุงู
        'optimizer': 'AdamW',      # ูุญุณู ุงูุชุฏุฑูุจ
        'lr0': 0.01,              # ูุนุฏู ุงูุชุนูู ุงูุฃููู
        'weight_decay': 0.0005,    # ุงูุญูุงู ุงููุฒู
        'warmup_epochs': 3,        # ุนุตูุฑ ุงูุฅุญูุงุก
        'box': 7.5,               # ูุฒู ุฎุณุงุฑุฉ ุงูุตูุฏูู
        'cls': 0.5,               # ูุฒู ุฎุณุงุฑุฉ ุงูุชุตููู
        'dfl': 1.5,               # ูุฒู ุฎุณุงุฑุฉ DFL
    }
    
    # ุจุฏุก ุงูุชุฏุฑูุจ
    try:
        results = model.train(**training_params)
        
        print("\nโ ุชู ุงูุชุฏุฑูุจ ุจูุฌุงุญ!")
        print(f"๐ ูููุน ุงููููุฐุฌ: ./outputs/sperm-analyzer-v1/weights/best.pt")
        print(f"๐ ุงููุชุงุฆุฌ: {results}")
        
        # ุงุฎุชุจุงุฑ ุงููููุฐุฌ
        test_model()
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุงูุชุฏุฑูุจ: {e}")
        return False
    
    return True

def test_model():
    """
    ุงุฎุชุจุงุฑ ุงููููุฐุฌ ุงููุฏุฑุจ
    """
    try:
        # ุชุญููู ุงููููุฐุฌ ุงููุฏุฑุจ
        model_path = "./outputs/sperm-analyzer-v1/weights/best.pt"
        
        if os.path.exists(model_path):
            model = YOLO(model_path)
            
            # ุงุฎุชุจุงุฑ ุนูู ุจูุงูุงุช ุงูุชุญูู
            results = model.val(data='dataset/data.yaml')
            
            print("\n๐ ูุชุงุฆุฌ ุงูุงุฎุชุจุงุฑ:")
            print(f"mAP50: {results.box.map50:.3f}")
            print(f"mAP50-95: {results.box.map:.3f}")
            print(f"Precision: {results.box.mp:.3f}")
            print(f"Recall: {results.box.mr:.3f}")
            
        else:
            print("โ ูู ูุชู ุงูุนุซูุฑ ุนูู ุงููููุฐุฌ ุงููุฏุฑุจ")
            
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุงูุงุฎุชุจุงุฑ: {e}")

def export_model():
    """
    ุชุตุฏูุฑ ุงููููุฐุฌ ูุฃุดูุงู ูุฎุชููุฉ
    """
    try:
        model_path = "./outputs/sperm-analyzer-v1/weights/best.pt"
        
        if os.path.exists(model_path):
            model = YOLO(model_path)
            
            # ุชุตุฏูุฑ ุฅูู ONNX ููุงุณุชุฎุฏุงู ูู ุงูุชุทุจููุงุช
            model.export(format="onnx")
            print("โ ุชู ุชุตุฏูุฑ ุงููููุฐุฌ ุฅูู ONNX")
            
            # ุชุตุฏูุฑ ุฅูู TorchScript ููุงุณุชุฎุฏุงู ุงููุญููู
            model.export(format="torchscript")
            print("โ ุชู ุชุตุฏูุฑ ุงููููุฐุฌ ุฅูู TorchScript")
            
            # ุชุตุฏูุฑ ุฅูู OpenVINO ููุฃุฏุงุก ุงูุณุฑูุน
            # model.export(format="openvino")
            # print("โ ุชู ุชุตุฏูุฑ ุงููููุฐุฌ ุฅูู OpenVINO")
            
        else:
            print("โ ูู ูุชู ุงูุนุซูุฑ ุนูู ุงููููุฐุฌ ููุชุตุฏูุฑ")
            
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุงูุชุตุฏูุฑ: {e}")

if __name__ == "__main__":
    print("๐ Sky CASA - AI Sperm Analysis Model Training")
    print("=" * 50)
    
    # ุงูุชุญูู ูู ูุชุทูุจุงุช ุงููุธุงู
    import torch
    print(f"PyTorch version: {torch.__version__}")
    print(f"CUDA available: {torch.cuda.is_available()}")
    
    # ุจุฏุก ุงูุชุฏุฑูุจ
    if train_sperm_model():
        print("\n๐ฏ ุชุตุฏูุฑ ุงููููุฐุฌ...")
        export_model()
        
        print("\n๐ ุชู ุฅููุงุก ุงูุนูููุฉ ุจูุฌุงุญ!")
        print("๐ ููููู ุงูุขู ุงุณุชุฎุฏุงู ุงููููุฐุฌ ูู ุงูุชุทุจูู ุงูุฑุฆูุณู")
    else:
        print("\nโ ูุดู ูู ุงูุชุฏุฑูุจ")